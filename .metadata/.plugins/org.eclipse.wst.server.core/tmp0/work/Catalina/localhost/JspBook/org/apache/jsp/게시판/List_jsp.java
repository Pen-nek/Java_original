/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.22
 * Generated at: 2019-08-13 01:05:01 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.게시판;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.sql.*;

public final class List_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("\t<style>\r\n");
      out.write("\t\ttable {border-collapse : collapse;}\r\n");
      out.write("\t\ttd.htitle{\r\n");
      out.write("\t\t\tbackground-color: yellow;\r\n");
      out.write("\t\t\ttext-align: center;\r\n");
      out.write("\t\t}\t\t\r\n");
      out.write("\t</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("\t");

		Connection conn = null;	// 데이터베이스 연결 객체 선언(아직 메모리에 없음)
		Statement stmt = null;	// SQL 문장 처리 객체 선언(아직 메모리에 없음)
		ResultSet rs = null;	// 조회된 테이블 결과 저장 객체(select 실행 시 필요, 그 외는 불필요)
		String sql = "";		// 쿼리 작성용 문자열 
		
		try {
			Class.forName("org.sqlite.JDBC");	// JDBC 드라이버 로드
			out.print("드라이버 로드 OK<br>");
			conn = DriverManager.getConnection("jdbc:sqlite:C:\\Users\\USER\\Desktop\\sqlite3\\mydb.db");
			out.print("DB연결 OK<br>");
			
			stmt = conn.createStatement();		// 쿼리 실행용 객체 생성
			sql = "SELECT * FROM board ORDER BY b_num DESC";
			rs = stmt.executeQuery(sql);		// 쿼리를 실행해서 결과를 rs 변수에 반환받음, rs는 거대한 변수
			
		} catch (Exception e) {
			out.print(e.toString() + "DB 에러");
		}
	
      out.write("\r\n");
      out.write("\t\r\n");
      out.write("\t<h1>게시판 리스트</h1>\r\n");
      out.write("\t<a href='Write.jsp'>글쓰기</a><br>\r\n");
      out.write("\t\r\n");
      out.write("\t<table border='1'>\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<td class='htitle' width='80'>번호</td>\r\n");
      out.write("\t\t\t<td class='htitle' width='300'>제목</td>\r\n");
      out.write("\t\t\t<td class='htitle' width='100'>작성자</td>\r\n");
      out.write("\t\t\t<td class='htitle' width='80'>조회수</td>\r\n");
      out.write("\t\t\t<td class='htitle' width='150'>작성일</td>\r\n");
      out.write("\t\t\t<td class='htitle' width='80'>삭제</td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\r\n");
      out.write("\t\t");

			while (rs.next()){
				int b_num = rs.getInt("b_num");	// 테이블의 필드명을 매개변수로 사용
				String b_subject = rs.getString("b_subject");
				String b_name = rs.getString("b_name");
				int b_visit = rs.getInt("b_visit");
				String b_date = rs.getString("b_date");
				String b_contents = rs.getString("b_contents");
		
      out.write("\r\n");
      out.write("\t\t\t<tr align='center'>\r\n");
      out.write("\t\t\t\t<td>");
      out.print(b_num );
      out.write("</td>\r\n");
      out.write("\t\t\t\t<td align='left'><a href='View.jsp?b_num=");
      out.print(b_num);
      out.write('\'');
      out.write('>');
      out.print(b_subject);
      out.write("</a></td>\r\n");
      out.write("\t\t\t\t<td>");
      out.print(b_name );
      out.write("</td>\r\n");
      out.write("\t\t\t\t<td>");
      out.print(b_visit );
      out.write("</td>\r\n");
      out.write("\t\t\t\t<td>");
      out.print(b_date );
      out.write("</td>\r\n");
      out.write("\t\t\t\t<td>\r\n");
      out.write("\t\t\t\t\t<a href='Delete.jsp?b_num=");
      out.print(b_num);
      out.write("'>삭제</a>\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t");

			//out.print(b_num + "==" + b_subject + "==" + b_name + "==" + b_visit + "==" + b_date + "==" + b_contents + "<br>");
			}
		
      out.write("\r\n");
      out.write("\t\r\n");
      out.write("\t</table>\r\n");
      out.write("\t\r\n");
      out.write("\t");

		try {
			rs.close();		// 반드시 닫아야 함
			stmt.close();	// 문장 처리 객체 닫기
			conn.close();	// 연결 객체 닫기
		} catch (Exception e) {
			out.print(e.toString() + "DB 닫기 에러");
		}
	
      out.write("\r\n");
      out.write("\t\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
